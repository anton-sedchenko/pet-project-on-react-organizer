{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anton\\\\Desktop\\\\react organizer\\\\organizer\\\\src\\\\components\\\\app\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState, useEffect } from 'react';\nimport './App.css';\nimport TasksTable from '../tasksTable/TasksTable.jsx';\nimport AddTaskForm from '../addTaskForm/AddTaskForm';\nimport ButtonDefault from '../UI/button/ButtonDefault';\nimport SearchTaskForm from '../searchTaskForm/SearchTaskForm';\nimport Modal from '../modal/Modal';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const dispatch = useDispatch();\n  const tasksAtStore = useSelector(state => state.tasks); // useEffect(() => {\n  //     const isDataAtStorage = localStorage.getItem('tasks');\n  //\n  //     if (isDataAtStorage) {\n  //         setTasks(JSON.parse(localStorage.getItem('tasks')));\n  //     } else {\n  //         saveTasksToLocalStorage([]);\n  //     }\n  // }, []);\n  //\n  // const [tasks, setTasks] = useState([]);\n  // const [searchQuery, setSearchQuery] = useState('');\n  // const [modal, setModal] = useState(false);\n  // const saveTasksToLocalStorage = (tasksArr) => {\n  //     localStorage.setItem('tasks', JSON.stringify(tasksArr));\n  // };\n  // const createTask = (task) => {\n  //     const newTasksArr = [...tasks, task];\n  //\n  //     setTasks(newTasksArr);\n  //     setModal(false);\n  //     saveTasksToLocalStorage(newTasksArr);\n  // };\n  // const removeTask = (taskId) => {\n  //     const newTasksArr = tasks.filter(task => task.id !== taskId);\n  //\n  //     setTasks(newTasksArr);\n  //     saveTasksToLocalStorage(newTasksArr);\n  // }\n  // const completeTask = (taskId) => {\n  //     const newTasksArr = tasks.map(task => {\n  //         if (task.id === taskId) {\n  //\n  //             return { ...task, complete: true };\n  //         }\n  //         return task;\n  //     });\n  //\n  //     setTasks(newTasksArr);\n  //     saveTasksToLocalStorage(newTasksArr);\n  // }\n  // const updateTask = (taskId, pointsDone, currentLevel) => {\n  //     const updatedTasksArr = tasks.map(task => {\n  //         if (task.id === taskId) {\n  //             return { ...task, pointsDone, currentLevel };\n  //         }\n  //         return task;\n  //     });\n  //     setTasks(updatedTasksArr);\n  //     saveTasksToLocalStorage(updatedTasksArr);\n  // };\n  // const searchQueryCallback = (taskNameToSearch) => setSearchQuery(taskNameToSearch);\n  //\n  // const foundTasks = useMemo(() => {\n  //     if (searchQuery) {\n  //         let regexp = new RegExp(searchQuery, 'gi');\n  //\n  //         // return tasks.filter((tasksItem) => regexp.test(tasksItem.taskName));\n  //         const filteredTasks = tasksAtStore.filter((tasksItem) => regexp.test(tasksItem.taskName));\n  //         dispatch({ type: 'ADD_TASK', payload: filteredTasks });\n  //     }\n  //\n  //     return tasksAtStore;\n  // }, [searchQuery, tasksAtStore]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      visible: modal,\n      setVisible: setModal,\n      children: /*#__PURE__*/_jsxDEV(AddTaskForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app__heading-actions-container\",\n      children: [/*#__PURE__*/_jsxDEV(ButtonDefault, {\n        onClick: () => setModal(true),\n        children: \"Create task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SearchTaskForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TasksTable // tasks={ foundTasks }\n    // removeTask={ removeTask }\n    // completeTask={ completeTask }\n    // updateTask={ updateTask }\n    , {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"nC+NQNg0KOgoU3DlUDcN8ab6f8s=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Anton/Desktop/react organizer/organizer/src/components/app/App.jsx"],"names":["React","useMemo","useState","useEffect","TasksTable","AddTaskForm","ButtonDefault","SearchTaskForm","Modal","useDispatch","useSelector","App","dispatch","tasksAtStore","state","tasks","modal","setModal"],"mappings":";;;AAAA,OAAOA,KAAP,IACIC,OADJ,EAEIC,QAFJ,EAGIC,SAHJ,QAIO,OAJP;AAKA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACX,QAAMC,QAAQ,GAAGH,WAAW,EAA5B;AACA,QAAMI,YAAY,GAAGH,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACC,KAAhB,CAAhC,CAFW,CAMX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI,QAAC,KAAD;AAAO,MAAA,OAAO,EAAGC,KAAjB;AAAyB,MAAA,UAAU,EAAGC,QAAtC;AAAA,6BAEI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAK,MAAA,SAAS,EAAC,gCAAf;AAAA,8BACI,QAAC,aAAD;AAAe,QAAA,OAAO,EAAG,MAAMA,QAAQ,CAAC,IAAD,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAGI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,eAUI,QAAC,UAAD,CACI;AACA;AACA;AACA;AAJJ;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH;;GA1FQN,G;UACYF,W,EACIC,W;;;KAFhBC,G;AA4FT,eAAeA,GAAf","sourcesContent":["import React, {\n    useMemo,\n    useState,\n    useEffect\n} from 'react';\nimport './App.css';\nimport TasksTable from '../tasksTable/TasksTable.jsx';\nimport AddTaskForm from '../addTaskForm/AddTaskForm';\nimport ButtonDefault from '../UI/button/ButtonDefault';\nimport SearchTaskForm from '../searchTaskForm/SearchTaskForm';\nimport Modal from '../modal/Modal';\nimport { useDispatch, useSelector } from \"react-redux\";\n\nfunction App() {\n    const dispatch = useDispatch();\n    const tasksAtStore = useSelector(state => state.tasks);\n\n\n\n    // useEffect(() => {\n    //     const isDataAtStorage = localStorage.getItem('tasks');\n    //\n    //     if (isDataAtStorage) {\n    //         setTasks(JSON.parse(localStorage.getItem('tasks')));\n    //     } else {\n    //         saveTasksToLocalStorage([]);\n    //     }\n    // }, []);\n    //\n    // const [tasks, setTasks] = useState([]);\n    // const [searchQuery, setSearchQuery] = useState('');\n    // const [modal, setModal] = useState(false);\n    // const saveTasksToLocalStorage = (tasksArr) => {\n    //     localStorage.setItem('tasks', JSON.stringify(tasksArr));\n    // };\n    // const createTask = (task) => {\n    //     const newTasksArr = [...tasks, task];\n    //\n    //     setTasks(newTasksArr);\n    //     setModal(false);\n    //     saveTasksToLocalStorage(newTasksArr);\n    // };\n    // const removeTask = (taskId) => {\n    //     const newTasksArr = tasks.filter(task => task.id !== taskId);\n    //\n    //     setTasks(newTasksArr);\n    //     saveTasksToLocalStorage(newTasksArr);\n    // }\n    // const completeTask = (taskId) => {\n    //     const newTasksArr = tasks.map(task => {\n    //         if (task.id === taskId) {\n    //\n    //             return { ...task, complete: true };\n    //         }\n    //         return task;\n    //     });\n    //\n    //     setTasks(newTasksArr);\n    //     saveTasksToLocalStorage(newTasksArr);\n    // }\n    // const updateTask = (taskId, pointsDone, currentLevel) => {\n    //     const updatedTasksArr = tasks.map(task => {\n    //         if (task.id === taskId) {\n    //             return { ...task, pointsDone, currentLevel };\n    //         }\n    //         return task;\n    //     });\n    //     setTasks(updatedTasksArr);\n    //     saveTasksToLocalStorage(updatedTasksArr);\n    // };\n    // const searchQueryCallback = (taskNameToSearch) => setSearchQuery(taskNameToSearch);\n    //\n    // const foundTasks = useMemo(() => {\n    //     if (searchQuery) {\n    //         let regexp = new RegExp(searchQuery, 'gi');\n    //\n    //         // return tasks.filter((tasksItem) => regexp.test(tasksItem.taskName));\n    //         const filteredTasks = tasksAtStore.filter((tasksItem) => regexp.test(tasksItem.taskName));\n    //         dispatch({ type: 'ADD_TASK', payload: filteredTasks });\n    //     }\n    //\n    //     return tasksAtStore;\n    // }, [searchQuery, tasksAtStore]);\n\n    return (\n        <div className=\"app\">\n            <Modal visible={ modal } setVisible={ setModal } >\n                {/*<AddTaskForm create={ createTask } />*/}\n                <AddTaskForm />\n            </Modal>\n            <div className=\"app__heading-actions-container\">\n                <ButtonDefault onClick={ () => setModal(true) } >Create task</ButtonDefault>\n                {/*<SearchTaskForm searchTask={ searchQueryCallback } />*/}\n                <SearchTaskForm />\n            </div>\n            <TasksTable\n                // tasks={ foundTasks }\n                // removeTask={ removeTask }\n                // completeTask={ completeTask }\n                // updateTask={ updateTask }\n            />\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}