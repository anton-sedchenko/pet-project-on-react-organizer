{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anton\\\\Desktop\\\\react organizer\\\\organizer\\\\src\\\\components\\\\app\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState, useEffect } from 'react';\nimport './App.css';\nimport TasksTable from '../tasksTable/TasksTable.jsx';\nimport AddTaskForm from '../addTaskForm/AddTaskForm';\nimport ButtonDefault from '../UI/button/ButtonDefault';\nimport SearchTaskForm from '../searchTaskForm/SearchTaskForm';\nimport Modal from '../modal/Modal';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const dispatch = useDispatch();\n  const tasksAtStore = useSelector(state => state.tasks);\n  console.log(tasksAtStore);\n  useEffect(() => {\n    const isDataAtStorage = localStorage.getItem('tasks');\n\n    if (isDataAtStorage) {\n      setTasks(JSON.parse(localStorage.getItem('tasks')));\n    } else {\n      saveTasksToLocalStorage([]);\n    }\n  }, []);\n  const [tasks, setTasks] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [modal, setModal] = useState(false);\n\n  const saveTasksToLocalStorage = tasksArr => {\n    localStorage.setItem('tasks', JSON.stringify(tasksArr));\n  };\n\n  const createTask = task => {\n    const newTasksArr = [...tasks, task];\n    setTasks(newTasksArr);\n    setModal(false);\n    saveTasksToLocalStorage(newTasksArr);\n  };\n\n  const removeTask = taskId => {\n    const newTasksArr = tasks.filter(task => task.id !== taskId);\n    setTasks(newTasksArr);\n  };\n\n  const completeTask = taskId => {\n    const newTasksArr = tasks.map(task => {\n      if (task.id === taskId) {\n        updateTask(taskId, task.pointsDone, task.currentLevel);\n        return { ...task,\n          complete: true\n        };\n      }\n\n      return task;\n    });\n    setTasks(newTasksArr);\n  };\n\n  const updateTask = (taskId, pointsDone, currentLevel) => {\n    const updatedTasksArr = tasks.map(task => {\n      if (task.id === taskId) {\n        return { ...task,\n          pointsDone,\n          currentLevel\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasksArr);\n    saveTasksToLocalStorage(updatedTasksArr);\n  };\n\n  const searchQueryCallback = taskNameToSearch => setSearchQuery(taskNameToSearch);\n\n  const foundTasks = useMemo(() => {\n    if (searchQuery) {\n      let regexp = new RegExp(searchQuery, 'gi');\n      return tasks.filter(tasksItem => regexp.test(tasksItem.taskName));\n    }\n\n    return tasks;\n  }, [searchQuery, tasks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      visible: modal,\n      setVisible: setModal,\n      children: /*#__PURE__*/_jsxDEV(AddTaskForm, {\n        create: createTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app__heading-actions-container\",\n      children: [/*#__PURE__*/_jsxDEV(ButtonDefault, {\n        onClick: () => setModal(true),\n        children: \"Create task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SearchTaskForm, {\n        searchTask: searchQueryCallback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TasksTable, {\n      tasks: foundTasks,\n      removeTask: removeTask,\n      completeTask: completeTask,\n      updateTask: updateTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"ahmJPGEeTAN2F0ge1qlNFA1AuFs=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Anton/Desktop/react organizer/organizer/src/components/app/App.jsx"],"names":["React","useMemo","useState","useEffect","TasksTable","AddTaskForm","ButtonDefault","SearchTaskForm","Modal","useDispatch","useSelector","App","dispatch","tasksAtStore","state","tasks","console","log","isDataAtStorage","localStorage","getItem","setTasks","JSON","parse","saveTasksToLocalStorage","searchQuery","setSearchQuery","modal","setModal","tasksArr","setItem","stringify","createTask","task","newTasksArr","removeTask","taskId","filter","id","completeTask","map","updateTask","pointsDone","currentLevel","complete","updatedTasksArr","searchQueryCallback","taskNameToSearch","foundTasks","regexp","RegExp","tasksItem","test","taskName"],"mappings":"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","sourcesContent":["import React, {\n    useMemo,\n    useState,\n    useEffect\n} from 'react';\nimport './App.css';\nimport TasksTable from '../tasksTable/TasksTable.jsx';\nimport AddTaskForm from '../addTaskForm/AddTaskForm';\nimport ButtonDefault from '../UI/button/ButtonDefault';\nimport SearchTaskForm from '../searchTaskForm/SearchTaskForm';\nimport Modal from '../modal/Modal';\nimport { useDispatch, useSelector } from \"react-redux\";\n\nfunction App() {\n    const dispatch = useDispatch();\n    const tasksAtStore = useSelector(state => state.tasks);\n    console.log(tasksAtStore);\n\n    useEffect(() => {\n        const isDataAtStorage = localStorage.getItem('tasks');\n\n        if (isDataAtStorage) {\n            setTasks(JSON.parse(localStorage.getItem('tasks')));\n        } else {\n            saveTasksToLocalStorage([]);\n        }\n    }, []);\n\n    const [tasks, setTasks] = useState([]);\n    const [searchQuery, setSearchQuery] = useState('');\n    const [modal, setModal] = useState(false);\n    const saveTasksToLocalStorage = (tasksArr) => {\n        localStorage.setItem('tasks', JSON.stringify(tasksArr));\n    };\n    const createTask = (task) => {\n        const newTasksArr = [...tasks, task];\n\n        setTasks(newTasksArr);\n        setModal(false);\n        saveTasksToLocalStorage(newTasksArr);\n    };\n    const removeTask = (taskId) => {\n        const newTasksArr = tasks.filter(task => task.id !== taskId);\n\n        setTasks(newTasksArr);\n    }\n    const completeTask = (taskId) => {\n        const newTasksArr = tasks.map(task => {\n            if (task.id === taskId) {\n                updateTask(taskId, task.pointsDone, task.currentLevel);\n                \n                return { ...task, complete: true };\n            }\n            return task;\n        });\n\n        setTasks(newTasksArr);\n    }\n    const updateTask = (taskId, pointsDone, currentLevel) => {\n        const updatedTasksArr = tasks.map(task => {\n            if (task.id === taskId) {\n                return { ...task, pointsDone, currentLevel };\n            }\n            return task;\n        });\n        setTasks(updatedTasksArr);\n        saveTasksToLocalStorage(updatedTasksArr);\n    };\n    const searchQueryCallback = (taskNameToSearch) => setSearchQuery(taskNameToSearch);\n\n    const foundTasks = useMemo(() => {\n        if (searchQuery) {\n            let regexp = new RegExp(searchQuery, 'gi');\n\n            return tasks.filter((tasksItem) => regexp.test(tasksItem.taskName));\n        }\n\n        return tasks;\n    }, [searchQuery, tasks]);\n\n    return (\n        <div className=\"app\">\n            <Modal visible={ modal } setVisible={ setModal } >\n                <AddTaskForm create={ createTask } />\n            </Modal>\n            <div className=\"app__heading-actions-container\">\n                <ButtonDefault onClick={ () => setModal(true) } >Create task</ButtonDefault>\n                <SearchTaskForm searchTask={ searchQueryCallback } />\n            </div>\n            <TasksTable\n                tasks={ foundTasks }\n                removeTask={ removeTask }\n                completeTask={ completeTask }\n                updateTask={ updateTask }\n            />\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}