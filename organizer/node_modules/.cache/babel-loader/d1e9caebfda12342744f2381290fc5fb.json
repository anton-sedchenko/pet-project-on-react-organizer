{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anton\\\\Desktop\\\\react organizer\\\\organizer\\\\src\\\\components\\\\app\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState, useEffect } from 'react';\nimport './App.css';\nimport TasksTable from '../tasksTable/TasksTable.jsx';\nimport AddTaskForm from '../addTaskForm/AddTaskForm';\nimport ButtonDefault from '../UI/button/ButtonDefault';\nimport SearchTaskForm from '../searchTaskForm/SearchTaskForm';\nimport Modal from '../modal/Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  useEffect(() => {\n    const isDataAtStorage = localStorage.getItem('tasks');\n\n    if (isDataAtStorage) {\n      setTasks(JSON.parse(localStorage.getItem('tasks')));\n    } else {\n      localStorage.setItem('tasks', JSON.stringify([]));\n    }\n  }, []);\n  const [tasks, setTasks] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [modal, setModal] = useState(false);\n\n  const createTask = task => {\n    const newTasksArr = [...tasks, task];\n    setTasks(newTasksArr);\n    setModal(false);\n    localStorage.setItem('tasks', JSON.stringify(newTasksArr));\n  };\n\n  const removeTask = taskId => {\n    const newTasksArr = tasks.filter(task => task.id !== taskId);\n    setTasks(newTasksArr);\n  };\n\n  const updateTask = (taskId, pointsDone, currentLevel) => {\n    const newTasksArr = tasks.filter(task => task.id !== taskId);\n  };\n\n  const searchQueryCallback = taskNameToSearch => setSearchQuery(taskNameToSearch);\n\n  const foundTasks = useMemo(() => {\n    if (searchQuery) {\n      let regexp = new RegExp(searchQuery, 'gi');\n      return tasks.filter(tasksItem => regexp.test(tasksItem.taskName));\n    }\n\n    return tasks;\n  }, [searchQuery, tasks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      visible: modal,\n      setVisible: setModal,\n      children: /*#__PURE__*/_jsxDEV(AddTaskForm, {\n        create: createTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app__heading-actions-container\",\n      children: [/*#__PURE__*/_jsxDEV(ButtonDefault, {\n        onClick: () => setModal(true),\n        children: \"Create task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SearchTaskForm, {\n        searchTask: searchQueryCallback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TasksTable, {\n      tasks: foundTasks,\n      removeTask: removeTask,\n      updateTask: updateTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"Ww0iYNXn561GAuXmJefEfvn0x0c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Anton/Desktop/react organizer/organizer/src/components/app/App.jsx"],"names":["React","useMemo","useState","useEffect","TasksTable","AddTaskForm","ButtonDefault","SearchTaskForm","Modal","App","isDataAtStorage","localStorage","getItem","setTasks","JSON","parse","setItem","stringify","tasks","searchQuery","setSearchQuery","modal","setModal","createTask","task","newTasksArr","removeTask","taskId","filter","id","updateTask","pointsDone","currentLevel","searchQueryCallback","taskNameToSearch","foundTasks","regexp","RegExp","tasksItem","test","taskName"],"mappings":"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","sourcesContent":["import React, {\n    useMemo,\n    useState,\n    useEffect\n} from 'react';\nimport './App.css';\nimport TasksTable from '../tasksTable/TasksTable.jsx';\nimport AddTaskForm from '../addTaskForm/AddTaskForm';\nimport ButtonDefault from '../UI/button/ButtonDefault';\nimport SearchTaskForm from '../searchTaskForm/SearchTaskForm';\nimport Modal from '../modal/Modal';\n\nfunction App() {\n    useEffect(() => {\n        const isDataAtStorage = localStorage.getItem('tasks');\n\n        if (isDataAtStorage) {\n            setTasks(JSON.parse(localStorage.getItem('tasks')));\n        } else {\n            localStorage.setItem('tasks', JSON.stringify([]));\n        }\n    }, []);\n\n    const [tasks, setTasks] = useState([]);\n    const [searchQuery, setSearchQuery] = useState('');\n    const [modal, setModal] = useState(false);\n    const createTask = (task) => {\n        const newTasksArr = [...tasks, task];\n\n        setTasks(newTasksArr);\n        setModal(false);\n        localStorage.setItem('tasks', JSON.stringify(newTasksArr));\n    }\n    const removeTask = (taskId) => {\n        const newTasksArr = tasks.filter(task => task.id !== taskId);\n\n        setTasks(newTasksArr);\n    }\n    const updateTask = (taskId, pointsDone, currentLevel) => {\n\n        const newTasksArr = tasks.filter(task => task.id !== taskId);\n    }\n    const searchQueryCallback = (taskNameToSearch) => setSearchQuery(taskNameToSearch);\n\n    const foundTasks = useMemo(() => {\n        if (searchQuery) {\n            let regexp = new RegExp(searchQuery, 'gi');\n\n            return tasks.filter((tasksItem) => regexp.test(tasksItem.taskName));\n        }\n\n        return tasks;\n    }, [searchQuery, tasks]);\n\n    return (\n        <div className=\"app\">\n            <Modal visible={ modal } setVisible={ setModal } >\n                <AddTaskForm create={ createTask } />\n            </Modal>\n            <div className=\"app__heading-actions-container\">\n                <ButtonDefault onClick={ () => setModal(true) } >Create task</ButtonDefault>\n                <SearchTaskForm searchTask={ searchQueryCallback } />\n            </div>\n            <TasksTable tasks={ foundTasks } removeTask={ removeTask } updateTask={ updateTask } />\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}