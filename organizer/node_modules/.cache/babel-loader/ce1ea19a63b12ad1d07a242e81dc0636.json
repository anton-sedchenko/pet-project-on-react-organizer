{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anton\\\\Desktop\\\\react organizer\\\\organizer\\\\src\\\\components\\\\app\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState, useEffect } from 'react';\nimport './App.css';\nimport TasksTable from '../tasksTable/TasksTable.jsx';\nimport AddTaskForm from '../addTaskForm/AddTaskForm';\nimport ButtonDefault from '../UI/button/ButtonDefault';\nimport SearchTaskForm from '../searchTaskForm/SearchTaskForm';\nimport Modal from '../modal/Modal';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const dispatch = useDispatch(); // const tasksAtStore = useSelector(state => state.tasks.tasks);\n\n  const tasksAtStore = useSelector(state => foundTasks);\n  const isAddTaskModalVisible = useSelector(state => state.addTaskModal.isVisible); // const [tasks, setTasks] = useState([]);\n\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const searchQueryCallback = taskNameToSearch => setSearchQuery(taskNameToSearch);\n\n  const foundTasks = useMemo(state => {\n    if (searchQuery) {\n      // let regexp = new RegExp(searchQuery, 'gi');\n      // return tasks.filter((tasksItem) => regexp.test(tasksItem.taskName));\n      // const filteredTasks = tasksAtStore.filter((tasksItem) => regexp.test(tasksItem.taskName));\n      dispatch({\n        type: 'ADD_TASK',\n        payload: {\n          searchQuery,\n          tasksAtStore\n        }\n      });\n    }\n\n    return state.tasks.tasks;\n  }, [searchQuery, tasksAtStore]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      visible: isAddTaskModalVisible,\n      children: /*#__PURE__*/_jsxDEV(AddTaskForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app__heading-actions-container\",\n      children: [/*#__PURE__*/_jsxDEV(ButtonDefault, {\n        onClick: () => dispatch({\n          type: 'SHOW_MODAL',\n          payload: true\n        }),\n        children: \"Create task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SearchTaskForm, {\n        searchTask: searchQueryCallback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SearchTaskForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TasksTable, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"tTkJqjCMzY3vlWBI3infjpxbgl4=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Anton/Desktop/react organizer/organizer/src/components/app/App.jsx"],"names":["React","useMemo","useState","useEffect","TasksTable","AddTaskForm","ButtonDefault","SearchTaskForm","Modal","useDispatch","useSelector","App","dispatch","tasksAtStore","state","foundTasks","isAddTaskModalVisible","addTaskModal","isVisible","searchQuery","setSearchQuery","searchQueryCallback","taskNameToSearch","type","payload","tasks"],"mappings":";;;AAAA,OAAOA,KAAP,IACIC,OADJ,EAEIC,QAFJ,EAGIC,SAHJ,QAIO,OAJP;AAKA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACX,QAAMC,QAAQ,GAAGH,WAAW,EAA5B,CADW,CAEX;;AACA,QAAMI,YAAY,GAAGH,WAAW,CAACI,KAAK,IAAIC,UAAV,CAAhC;AACA,QAAMC,qBAAqB,GAAGN,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACG,YAAN,CAAmBC,SAA7B,CAAzC,CAJW,CAOX;;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,CAAC,EAAD,CAA9C;;AAEA,QAAMmB,mBAAmB,GAAIC,gBAAD,IAAsBF,cAAc,CAACE,gBAAD,CAAhE;;AAEA,QAAMP,UAAU,GAAGd,OAAO,CAAEa,KAAD,IAAW;AAClC,QAAIK,WAAJ,EAAiB;AACb;AAEA;AACA;AACAP,MAAAA,QAAQ,CAAC;AAAEW,QAAAA,IAAI,EAAE,UAAR;AAAoBC,QAAAA,OAAO,EAAE;AAACL,UAAAA,WAAD;AAAcN,UAAAA;AAAd;AAA7B,OAAD,CAAR;AACH;;AAED,WAAOC,KAAK,CAACW,KAAN,CAAYA,KAAnB;AACH,GAVyB,EAUvB,CAACN,WAAD,EAAcN,YAAd,CAVuB,CAA1B;AAYA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI,QAAC,KAAD;AAAO,MAAA,OAAO,EAAGG,qBAAjB;AAAA,6BACI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAK,MAAA,SAAS,EAAC,gCAAf;AAAA,8BACI,QAAC,aAAD;AAAe,QAAA,OAAO,EAAG,MAAMJ,QAAQ,CAAC;AAAEW,UAAAA,IAAI,EAAE,YAAR;AAAsBC,UAAAA,OAAO,EAAE;AAA/B,SAAD,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,cAAD;AAAgB,QAAA,UAAU,EAAGH;AAA7B;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eASI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH;;GArCQV,G;UACYF,W,EAEIC,W,EACSA,W;;;KAJzBC,G;AAuCT,eAAeA,GAAf","sourcesContent":["import React, {\n    useMemo,\n    useState,\n    useEffect\n} from 'react';\nimport './App.css';\nimport TasksTable from '../tasksTable/TasksTable.jsx';\nimport AddTaskForm from '../addTaskForm/AddTaskForm';\nimport ButtonDefault from '../UI/button/ButtonDefault';\nimport SearchTaskForm from '../searchTaskForm/SearchTaskForm';\nimport Modal from '../modal/Modal';\nimport { useDispatch, useSelector } from \"react-redux\";\n\nfunction App() {\n    const dispatch = useDispatch();\n    // const tasksAtStore = useSelector(state => state.tasks.tasks);\n    const tasksAtStore = useSelector(state => foundTasks);\n    const isAddTaskModalVisible = useSelector(state => state.addTaskModal.isVisible);\n\n\n    // const [tasks, setTasks] = useState([]);\n    const [searchQuery, setSearchQuery] = useState('');\n\n    const searchQueryCallback = (taskNameToSearch) => setSearchQuery(taskNameToSearch);\n\n    const foundTasks = useMemo((state) => {\n        if (searchQuery) {\n            // let regexp = new RegExp(searchQuery, 'gi');\n\n            // return tasks.filter((tasksItem) => regexp.test(tasksItem.taskName));\n            // const filteredTasks = tasksAtStore.filter((tasksItem) => regexp.test(tasksItem.taskName));\n            dispatch({ type: 'ADD_TASK', payload: {searchQuery, tasksAtStore} });\n        }\n\n        return state.tasks.tasks;\n    }, [searchQuery, tasksAtStore]);\n\n    return (\n        <div className=\"app\">\n            <Modal visible={ isAddTaskModalVisible }>\n                <AddTaskForm />\n            </Modal>\n            <div className=\"app__heading-actions-container\">\n                <ButtonDefault onClick={ () => dispatch({ type: 'SHOW_MODAL', payload: true }) } >Create task</ButtonDefault>\n                <SearchTaskForm searchTask={ searchQueryCallback } />\n                <SearchTaskForm />\n            </div>\n            <TasksTable />\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}