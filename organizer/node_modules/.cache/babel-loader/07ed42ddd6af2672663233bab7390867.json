{"ast":null,"code":"const tasksAtLocalStorage = localStorage.getItem('tasks') || [];\nconst defaultState = {\n  tasks: JSON.parse(tasksAtLocalStorage)\n};\nconst ADD_TASK = 'ADD_TASK';\nconst REMOVE_TASK = 'REMOVE_TASK';\nconst UPDATE_TASK = 'UPDATE_TASK';\nconst COMPLETE_TASK = 'COMPLETE_TASK';\nexport const tasksReducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case ADD_TASK:\n      localStorage.setItem('tasks', JSON.stringify([...state.tasks, action.payload]));\n      return { ...state,\n        tasks: [...state.tasks, action.payload]\n      };\n\n    case REMOVE_TASK:\n      const newTasksArr = [...state.tasks].filter(task => task.id !== action.payload.taskId);\n      localStorage.setItem('tasks', JSON.stringify(newTasksArr));\n      return { ...state,\n        tasks: newTasksArr\n      };\n\n    case UPDATE_TASK:\n      const updatedTasksArr = [...state.tasks].map(task => {\n        if (task.id === action.payload.taskId) {\n          return { ...task,\n            pointsDone: action.payload.pointsDone,\n            currentLevel: action.payload.currentLevel\n          };\n        }\n\n        return task;\n      });\n      localStorage.setItem('tasks', JSON.stringify(updatedTasksArr));\n      return { ...state,\n        tasks: updatedTasksArr\n      };\n\n    case COMPLETE_TASK:\n      const tasksListAfterCompleteOne = [...state.tasks].map(task => {\n        if (task.id === action.payload.taskId) {\n          return { ...task,\n            complete: true\n          };\n        }\n\n        return task;\n      });\n      localStorage.setItem('tasks', JSON.stringify(tasksListAfterCompleteOne));\n      return { ...state,\n        tasks: tasksListAfterCompleteOne\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/Anton/Desktop/react organizer/organizer/src/store/tasksReducer.js"],"names":["tasksAtLocalStorage","localStorage","getItem","defaultState","tasks","JSON","parse","ADD_TASK","REMOVE_TASK","UPDATE_TASK","COMPLETE_TASK","tasksReducer","state","action","type","setItem","stringify","payload","newTasksArr","filter","task","id","taskId","updatedTasksArr","map","pointsDone","currentLevel","tasksListAfterCompleteOne","complete"],"mappings":"AAAA,MAAMA,mBAAmB,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,KAAiC,EAA7D;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAWN,mBAAX;AADU,CAArB;AAGA,MAAMO,QAAQ,GAAG,UAAjB;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,aAAa,GAAG,eAAtB;AAEA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGT,YAAT,EAAuBU,MAAvB,KAAkC;AAC1D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,QAAL;AACIN,MAAAA,YAAY,CAACc,OAAb,CAAqB,OAArB,EAA8BV,IAAI,CAACW,SAAL,CAAe,CAAC,GAAGJ,KAAK,CAACR,KAAV,EAAiBS,MAAM,CAACI,OAAxB,CAAf,CAA9B;AAEA,aAAO,EAAE,GAAGL,KAAL;AAAYR,QAAAA,KAAK,EAAE,CAAC,GAAGQ,KAAK,CAACR,KAAV,EAAiBS,MAAM,CAACI,OAAxB;AAAnB,OAAP;;AACJ,SAAKT,WAAL;AACI,YAAMU,WAAW,GAAG,CAAC,GAAGN,KAAK,CAACR,KAAV,EAAiBe,MAAjB,CAAwBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYR,MAAM,CAACI,OAAP,CAAeK,MAA3D,CAApB;AACArB,MAAAA,YAAY,CAACc,OAAb,CAAqB,OAArB,EAA8BV,IAAI,CAACW,SAAL,CAAeE,WAAf,CAA9B;AAEA,aAAO,EAAE,GAAGN,KAAL;AAAYR,QAAAA,KAAK,EAAEc;AAAnB,OAAP;;AACJ,SAAKT,WAAL;AACI,YAAMc,eAAe,GAAG,CAAC,GAAGX,KAAK,CAACR,KAAV,EAAiBoB,GAAjB,CAAqBJ,IAAI,IAAI;AACjD,YAAIA,IAAI,CAACC,EAAL,KAAYR,MAAM,CAACI,OAAP,CAAeK,MAA/B,EAAuC;AACnC,iBAAO,EAAE,GAAGF,IAAL;AAAWK,YAAAA,UAAU,EAAEZ,MAAM,CAACI,OAAP,CAAeQ,UAAtC;AAAkDC,YAAAA,YAAY,EAAEb,MAAM,CAACI,OAAP,CAAeS;AAA/E,WAAP;AACH;;AAED,eAAON,IAAP;AACH,OANuB,CAAxB;AAOAnB,MAAAA,YAAY,CAACc,OAAb,CAAqB,OAArB,EAA8BV,IAAI,CAACW,SAAL,CAAeO,eAAf,CAA9B;AAEA,aAAO,EAAE,GAAGX,KAAL;AAAYR,QAAAA,KAAK,EAAEmB;AAAnB,OAAP;;AACJ,SAAKb,aAAL;AACI,YAAMiB,yBAAyB,GAAG,CAAC,GAAGf,KAAK,CAACR,KAAV,EAAiBoB,GAAjB,CAAqBJ,IAAI,IAAI;AAC3D,YAAIA,IAAI,CAACC,EAAL,KAAYR,MAAM,CAACI,OAAP,CAAeK,MAA/B,EAAuC;AACnC,iBAAO,EAAE,GAAGF,IAAL;AAAWQ,YAAAA,QAAQ,EAAE;AAArB,WAAP;AACH;;AAED,eAAOR,IAAP;AACH,OANiC,CAAlC;AAOAnB,MAAAA,YAAY,CAACc,OAAb,CAAqB,OAArB,EAA8BV,IAAI,CAACW,SAAL,CAAeW,yBAAf,CAA9B;AAEA,aAAO,EAAE,GAAGf,KAAL;AAAYR,QAAAA,KAAK,EAAEuB;AAAnB,OAAP;;AACJ;AACI,aAAOf,KAAP;AAjCR;AAmCH,CApCM","sourcesContent":["const tasksAtLocalStorage = localStorage.getItem('tasks') || [];\r\nconst defaultState = {\r\n    tasks: JSON.parse(tasksAtLocalStorage)\r\n};\r\nconst ADD_TASK = 'ADD_TASK';\r\nconst REMOVE_TASK = 'REMOVE_TASK';\r\nconst UPDATE_TASK = 'UPDATE_TASK';\r\nconst COMPLETE_TASK = 'COMPLETE_TASK';\r\n\r\nexport const tasksReducer = (state = defaultState, action) => {\r\n    switch (action.type) {\r\n        case ADD_TASK:\r\n            localStorage.setItem('tasks', JSON.stringify([...state.tasks, action.payload]));\r\n\r\n            return { ...state, tasks: [...state.tasks, action.payload] };\r\n        case REMOVE_TASK:\r\n            const newTasksArr = [...state.tasks].filter(task => task.id !== action.payload.taskId);\r\n            localStorage.setItem('tasks', JSON.stringify(newTasksArr));\r\n\r\n            return { ...state, tasks: newTasksArr };\r\n        case UPDATE_TASK:\r\n            const updatedTasksArr = [...state.tasks].map(task => {\r\n                if (task.id === action.payload.taskId) {\r\n                    return { ...task, pointsDone: action.payload.pointsDone, currentLevel: action.payload.currentLevel };\r\n                }\r\n\r\n                return task;\r\n            });\r\n            localStorage.setItem('tasks', JSON.stringify(updatedTasksArr));\r\n\r\n            return { ...state, tasks: updatedTasksArr };\r\n        case COMPLETE_TASK:\r\n            const tasksListAfterCompleteOne = [...state.tasks].map(task => {\r\n                if (task.id === action.payload.taskId) {\r\n                    return { ...task, complete: true };\r\n                }\r\n\r\n                return task;\r\n            });\r\n            localStorage.setItem('tasks', JSON.stringify(tasksListAfterCompleteOne));\r\n\r\n            return { ...state, tasks: tasksListAfterCompleteOne };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}