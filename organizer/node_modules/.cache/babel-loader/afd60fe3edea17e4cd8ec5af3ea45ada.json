{"ast":null,"code":"const defaultState = {\n  tasks: JSON.parse(localStorage.getItem('tasks'))\n};\nexport const tasksReducer = (state = defaultState, action) => {\n  let updatedTasksArr = [];\n\n  switch (action.type) {\n    case 'ADD_TASK':\n      return { ...state,\n        tasks: action.payload\n      };\n\n    case 'REMOVE_TASK':\n      return { ...state,\n        tasks: action.payload\n      };\n\n    case 'UPDATE_TASK':\n      updatedTasksArr = action.payload.tasksAtStore.map(task => {\n        if (task.id === action.payload.taskId) {\n          return { ...task,\n            pointsDone: action.payload.pointsDone,\n            currentLevel: action.payload.currentLevel\n          };\n        }\n\n        return task;\n      });\n      localStorage.setItem('tasks', JSON.stringify(updatedTasksArr));\n      return { ...state,\n        tasks: updatedTasksArr\n      };\n\n    case 'COMPLETE_TASK':\n      updatedTasksArr = action.payload.tasksAtStore.map(task => {\n        if (task.id === action.payload.taskId) {\n          return { ...task,\n            complete: true\n          };\n        }\n\n        return task;\n      });\n      localStorage.setItem('tasks', JSON.stringify(updatedTasksArr));\n      return { ...state,\n        tasks: updatedTasksArr\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/Anton/Desktop/react organizer/organizer/src/store/tasksReducer.js"],"names":["defaultState","tasks","JSON","parse","localStorage","getItem","tasksReducer","state","action","updatedTasksArr","type","payload","tasksAtStore","map","task","id","taskId","pointsDone","currentLevel","setItem","stringify","complete"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX;AADU,CAArB;AAGA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AAC1D,MAAIC,eAAe,GAAG,EAAtB;;AAEA,UAAQD,MAAM,CAACE,IAAf;AACI,SAAK,UAAL;AACI,aAAO,EAAE,GAAGH,KAAL;AAAYN,QAAAA,KAAK,EAAEO,MAAM,CAACG;AAA1B,OAAP;;AACJ,SAAK,aAAL;AACI,aAAO,EAAE,GAAGJ,KAAL;AAAYN,QAAAA,KAAK,EAAEO,MAAM,CAACG;AAA1B,OAAP;;AACJ,SAAK,aAAL;AACIF,MAAAA,eAAe,GAAGD,MAAM,CAACG,OAAP,CAAeC,YAAf,CAA4BC,GAA5B,CAAgCC,IAAI,IAAI;AACtD,YAAIA,IAAI,CAACC,EAAL,KAAYP,MAAM,CAACG,OAAP,CAAeK,MAA/B,EAAuC;AACnC,iBAAO,EAAE,GAAGF,IAAL;AAAWG,YAAAA,UAAU,EAAET,MAAM,CAACG,OAAP,CAAeM,UAAtC;AAAkDC,YAAAA,YAAY,EAAEV,MAAM,CAACG,OAAP,CAAeO;AAA/E,WAAP;AACH;;AACD,eAAOJ,IAAP;AACH,OALiB,CAAlB;AAMAV,MAAAA,YAAY,CAACe,OAAb,CAAqB,OAArB,EAA8BjB,IAAI,CAACkB,SAAL,CAAeX,eAAf,CAA9B;AAEA,aAAO,EAAE,GAAGF,KAAL;AAAYN,QAAAA,KAAK,EAAEQ;AAAnB,OAAP;;AACJ,SAAK,eAAL;AACIA,MAAAA,eAAe,GAAGD,MAAM,CAACG,OAAP,CAAeC,YAAf,CAA4BC,GAA5B,CAAgCC,IAAI,IAAI;AACtD,YAAIA,IAAI,CAACC,EAAL,KAAYP,MAAM,CAACG,OAAP,CAAeK,MAA/B,EAAuC;AACnC,iBAAO,EAAE,GAAGF,IAAL;AAAWO,YAAAA,QAAQ,EAAE;AAArB,WAAP;AACH;;AACD,eAAOP,IAAP;AACH,OALiB,CAAlB;AAMAV,MAAAA,YAAY,CAACe,OAAb,CAAqB,OAArB,EAA8BjB,IAAI,CAACkB,SAAL,CAAeX,eAAf,CAA9B;AAEA,aAAO,EAAE,GAAGF,KAAL;AAAYN,QAAAA,KAAK,EAAEQ;AAAnB,OAAP;;AACJ;AACI,aAAOF,KAAP;AA1BR;AA4BH,CA/BM","sourcesContent":["const defaultState = {\r\n    tasks: JSON.parse(localStorage.getItem('tasks'))\r\n};\r\nexport const tasksReducer = (state = defaultState, action) => {\r\n    let updatedTasksArr = [];\r\n\r\n    switch (action.type) {\r\n        case 'ADD_TASK':\r\n            return { ...state, tasks: action.payload };\r\n        case 'REMOVE_TASK':\r\n            return { ...state, tasks: action.payload };\r\n        case 'UPDATE_TASK':\r\n            updatedTasksArr = action.payload.tasksAtStore.map(task => {\r\n                if (task.id === action.payload.taskId) {\r\n                    return { ...task, pointsDone: action.payload.pointsDone, currentLevel: action.payload.currentLevel };\r\n                }\r\n                return task;\r\n            });\r\n            localStorage.setItem('tasks', JSON.stringify(updatedTasksArr));\r\n\r\n            return { ...state, tasks: updatedTasksArr };\r\n        case 'COMPLETE_TASK':\r\n            updatedTasksArr = action.payload.tasksAtStore.map(task => {\r\n                if (task.id === action.payload.taskId) {\r\n                    return { ...task, complete: true };\r\n                }\r\n                return task;\r\n            });\r\n            localStorage.setItem('tasks', JSON.stringify(updatedTasksArr));\r\n\r\n            return { ...state, tasks: updatedTasksArr };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}